OVERVIEW:

README.wattch is for Wattch Rev 1.0.  Wattch1.0 can be downloaded
from:

http://www.ee.princeton.edu/~dbrooks/sim-wattch-1.0.tar.gz

Check my Web page for newer versions.

TO INSTALL:

Wattch should compile on any system that SimpleScalar compiles on.  Follow 
the instructions for installing SimpleScalar (in README).  Wattch should
work with both the PISA and ALPHA versions of SimpleScalar, although
testing/development was primarily done with the ALPHA version.

Note that Wattch is primarly designed to be used with sim-outorder (the
full processor simulator).  It does not support sim-fast, sim-cache,
etc (although adding some simple power estimates for these faster
simulators should be possible).  Thus you should only need to
run "make sim-outorder" and in fact you will get errors if you try
to compile the other simulators becaues they are missing some external
variable declarations.

SIMULATION AND RESULTS:

Running Wattch should be just like running sim-outorder.  Provide it
with your processor configuration parameters, input binary, and input
data set.  There aren't any additional command line parameters, but
there are some hard-coded parameters that you could change.  For example,
the technology settings (in power.h) and the choice of static vs dynamic 
activity factors (power.h).

These are the additional statistics that are generated by Wattch:

1)  Stats that hold the "total power usage" (actually energy) of the
unit over the program execution.  This is basically the summation of
the power usage on each cycle.  We record these stats for each hardware
unit that we model (rename, bpred, etc), each pipestage (fetch, dispatch,
issue), as well as the total power dissipation.  We also record these
stats for each conditional clocking style that we model.  The four
conditional clocking styles currently implemented are:
  a) no conditional clocking -- ie "rename_power"
  b) simple conditional clocking; ie. "rename_power_cc1"
  c) aggressive, ideal (0 power consumed when turned off) conditional
     clocking; ie. "rename_power_cc2"
  d) aggressive, non-ideal (some fraction is still consumed when disabled)
     conditional clocking; ie. "rename_power_cc3"

2)  Stats that hold the average power usage.  This is basically
total_power_usage divided by the number of cycles.

Probably the most interesting clock gating style is cc3.  If you just 
want to get one power number and don't care about unit breakdowns look at
"avg_total_power_cycle_cc3".

3)  Unit access statistics are also generated as well as the max number
of of accesses for the different units.  We also track the maximum
processor power dissipation on any given cycle. (max_cycle_power_cc*)

When Wattch invokes Cacti (the optimal cache configuration program),
it also prints out some timing analysis for the cache structures. 

CHANGES:

Some highlights of the major changes from the basic SimpleScalar 3.0 
release.

sim-outorder.c:
1) Hardware access counters are added to keep track of the number
of accesses, per cycle, to each hardware structure.  The updates
for these access counters are sprinkled throughout the code in
places where the hardware is accessed. (the easiest way to find
these places is to search for the string "_access++")
2) Bitline activity factors data (population counts of the data
being read/written to array structures) is computed along with
the access counts.  Both the access counters and the AFs are
extern'ed into power.c 
3) Many sim-outorder parameter variables change from static to 
non-static so they can be extern'ed in power.c
4) Added data_width parameter to sim-outorder.c

power.c:
This file is the contains the core of Wattch.  The power models are
for the basic hardware structures that we model are defined here.
On startup these power models are accessed with the values of the
user parameters in order to generate power estimates for the various
proccesor units.  These power estimates are then scaled dynamically
(per-cycle basis) with unit access counts and activity factors.

Cacti libraries (in cacti subdirectory):
This is the Cacti distribution.  It is used in power.c to perform
automatic delay-optimial cache partitioning.  Some of the low-level
routines to compute gate/diffusion capacitance of transistors are also
shared.

wattch-interact.c:
This is a small program that allows rough _static_ estimates of power
after the user enters some of the basic parameters for register files,
CAMs, and caches.  It uses the same power models and returns a power
estimate assuming that all the ports on the unit are active with
static activity factors.  Can be compiled by just typing 
"make wattch-interact", then run "wattch-interact".

Makefile:
The Makefile was updated to compile the Cacti libraries and power.c
into sim-outorder.  It was also modified to compile the interactive
mode of Wattch.

Email: dbrooks@ee.princeton.edu

I've included this copyright since we're using Cacti for some stuff.

/*------------------------------------------------------------
 *  Copyright 1994 Digital Equipment Corporation and Steve Wilton
 *                         All Rights Reserved
 *
 * Permission to use, copy, and modify this software and its documentation is
 * hereby granted only under the following terms and conditions.  Both the
 * above copyright notice and this permission notice must appear in all copies
 * of the software, derivative works or modified versions, and any portions
 * thereof, and both notices must appear in supporting documentation.
 *
 * Users of this software agree to the terms and conditions set forth herein,
 * and hereby grant back to Digital a non-exclusive, unrestricted, royalty-
 * free right and license under any changes, enhancements or extensions
 * made to the core functions of the software, including but not limited to
 * those affording compatibility with other hardware or software
 * environments, but excluding applications which incorporate this software.
 * Users further agree to use their best efforts to return to Digital any
 * such changes, enhancements or extensions that they make and inform Digital
 * of noteworthy uses of this software.  Correspondence should be provided
 * to Digital at:
 *
 *                       Director of Licensing
 *                       Western Research Laboratory
 *                       Digital Equipment Corporation
 *                       100 Hamilton Avenue
 *                       Palo Alto, California  94301
 *
 * This software may be distributed (but not offered for sale or transferred
 * for compensation) to third parties, provided such third parties agree to
 * abide by the terms and conditions of this notice.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
 * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 *------------------------------------------------------------*/
